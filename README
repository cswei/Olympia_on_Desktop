++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++ Building Instruction of WebKit-Olympia +++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. Windows

1.1 System Requirement:
    Windows XP or Windows 7, 32/64 bit.

1.2 Environment Preparation:
    * Microsoft Visual Studio 2008
    * Qt for Visual Studio 2008 Build ( Version >= 4.7 )
        add Qt binary path e.g. "C:\Qt\4.7.1\bin" into PATH.
    * CMake for Windows ( Version >= 2.8 )
        add CMake binary path e.g. "C:\CMake\bin" into PATH.
    * Strawberry Perl ( Version >= 5.10 )
        add Strawberry Perl binary path e.g. "C:\strawberry\perl\bin;C:\strawberry\c\bin" into PATH.
    * Python binary installer for Windows ( Version >= 3.1 )
        add Python binary path e.g. "C:\Python31" into PATH.
    * flex ( Version >= 2.5.4 )
        MAKE SURE the flex installation path do not contain space.
        add flex binary path e.g. "C:\GnuWin32\bin" into PATH.
    * gperf ( Version >= 3.0.1 )
        MAKE SURE the gperf installation path do not contain space.
        add gperf binary path e.g. "C:\GnuWin32\bin" into PATH.
    * bison ( Version >= 2.4.1 )
        MAKE SURE the bison installation path do not contain space.
        add bison binary path e.g. "C:\GnuWin32\bin" into PATH.
    * Other Unix Utilities: UnxUtils.zip ( get it from http://unxutils.sourceforge.net/ )
        unzip it somewhere and add the binary path e.g. "C:\UnxUtils\bin;C:\UnxUtils\usr\local\wbin" into PATH.
        MAKE SURE that this unix utilities path do not contain space, and it should be placed after perl, python, flex, gperf and bison in PATH.
    * OpenSSL binary distributions for windows ( get it from http://www.openssl.org/related/binaries.html )
    * jom ( get it from ftp://ftp.qt.nokia.com/jom/jom.zip )
        this is the optional tool for the command-line-style concurrent build.
        unzip it somewhere and add the binary path e.g. "C:\jom\" into PATH.

1.3 Project Building:
    1. unzip the source files somewhere;
    2. start a "Visual Studio 2008 Command Prompt", then follow the steps:
        cd <unzipped path>/WebKit_Olympia/olympia;
        mkdir build;
        cd build;

    here you've got 3 choices:
    A: use Visual Studio 2008 to build in IDE:
        cmake .. -DPORT=BlackBerry;
        start Visual Studio 2008, open the solution file: "<unzipped_path>/WebKit_Olympia/olympia/build/WebKit.sln";
        build "ALL_BUILD" project;
        then build "INSTALL" project.
    B: use nmake to build in command line:
        cmake .. -DPORT=BlackBerry -G "NMake Makefiles"
        nmake;
        nmake install;
    C: use jom to build in command line concurrently.
        cmake .. -DPORT=BlackBerry -G "NMake Makefiles JOM"
        jom -j<number_of_threads> install

    3. files will be installed in "<unzipped_path>/WebKit_Olympia/olympia/build/bin". double click the browser.exe to run.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2. Linux

2.1 System Requirement:
    Ubuntu 10.04 or later, 32/64 bit.
    
2.2 Environment Preparation:
    use synaptic package manager to install all the tools and libraries that needed: 
        * g++ ( Version >= 4.0 )
        * gperf ( Version >= 3.0 )
        * flex ( Version >= 2.5 )
        * bison ( Version >= 1.2 )
        * make ( Version >= 3.8 )
        * cmake ( Version >= 2.8 )
        * Qt4 libraries( Version >= 4.7 ), including libqtcore4, libqtgui4, libqt4-(network/sql/xml), libqt4-sql-sqlite
        * zlib, zlib-dev ( Version >= 1.0 )
        * libsqlite3, libsqlite3-dev ( Version >= 3.7 )
        * libicu, libicu-dev ( Version >= 4.2 )
        * libxml2, libxml2-dev ( Version >= 2.6 )
        * libxslt, libxslt-dev ( Version >= 1.1 )
        * libpng12, libpng12-dev ( Version >= 1.2.44 )
        * libjpeg62, libjpeg62-dev ( Version >= 6.2 )
        * libfreetype6, libfreetype6-dev ( Version >= 2.4 )
        * libssl, libssl-dev ( Version >= 0.9 )
        * openssl ( Version >= 0.9 )

2.3 Project Building:
    1. unzip the source files somewhere;
    2. start a console, then follow the steps:
        cd <unzipped_path>/WebKit_Olympia/olympia;
        mkdir build;
        cd build;
        cmake .. -DPORT=BlackBerry;
    3. build the webkit_olympia browser:
        make; ( or "make -j<number_of_threads>;", to start concurrent build )
        make install;
    after finish, files will be installed in "<unzipped_path>/WebKit_Olympia/olympia/build/bin".
    4. setup the LD_LIBRARY_PATH to include your build path:
        export LD_LIBRARY_PATH=<unzipped_path>/WebKit_Olympia/olympia/build/bin:$LD_LIBRARY_PATH
    you can type it in console or add it in $HOME/.bashrc to make it work.
    5. cd bin; ./browser;
    to start the brwoser application.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3. Mac

3.1 System Requirement:
    Mac OS X 10.6.4 (Snow Leopard) or later
    
3.2 Environment Preparation:
    * xcode ( Version >= 3.2.5 )
    * Qt for Mac ( Version >= 4.7 )
    * cmake ( Version >= 2.8 )
    * libicu ( Version >= 3.6 )
    * libjpeg ( Version >= 6.2 )
    * libpng ( Version == 1.4.5 )
    you may get these free tools and libraries' dmg package or source files within the shipped package.
    MAKE SURE the libpng's version is 1.4.5, because the mac build can not be compiled with 1.2.x and 1.5.x.

3.3 Project Building:
    1. unzip the source files somewhere;
    2. start a console, then follow the steps:
        cd <unzipped_path>/WebKit_Olympia/olympia;
        mkdir build;
        cd build;
        cmake .. -DPORT=BlackBerry;
    3. build the webkit_olympia browser:
        make; ( or "make -j<number_of_threads>;", to start concurrent build )
        make install;
    after finish, files will be installed in "<unzipped_path>/WebKit_Olympia/olympia/build/bin".
    4. cd bin; ./browser;
    to start the brwoser application.
