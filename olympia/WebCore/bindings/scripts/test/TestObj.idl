/*
 * Copyright (C) 2009 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary formstrArg, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIEstrArg, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// This IDL file is for testing the bindings code generator and for tracking
// changes in its ouput.
module test {
    interface TestObj {
        // Attributes
        readonly attribute long            readOnlyIntAttr;
        readonly attribute DOMString       readOnlyStringAttr;
        readonly attribute TestObj         readOnlyTestObjAttr;
        attribute long                     intAttr;
        attribute long long                longLongAttr;
        attribute unsigned long long       unsignedLongLongAttr;
        attribute DOMString                stringAttr;
        attribute TestObj                  testObjAttr;

        // Methods
        void    voidMethod();
        void    voidMethodWithArgs(in long intArg, in DOMString strArg, in TestObj objArg);
        long    intMethod();
        long    intMethodWithArgs(in long intArg, in DOMString strArg, in TestObj objArg);
        TestObj objMethod();
        TestObj objMethodWithArgs(in long intArg, in DOMString strArg, in TestObj objArg);

        [RequiresAllArguments] TestObj methodThatRequiresAllArgs(in DOMString strArg, in TestObj objArg);
        [RequiresAllArguments=Raise] TestObj methodThatRequiresAllArgsAndThrows(in DOMString strArg, in TestObj objArg)
            raises(DOMException);

        void serializedValue(in SerializedScriptValue serializedArg);

        // Exceptions
        void    methodWithException() raises(DOMException);
        attribute long attrWithException raises(DOMException);
        attribute long attrWithSetterException getter raises(DOMException);
        attribute long attrWithGetterException setter raises(DOMException);

        // 'Custom' extended attribute
        attribute [Custom] long            customAttr;
        [Custom] void customMethod();
        [Custom] void customMethodWithArgs(in long intArg, in DOMString strArg, in TestObj objArg);

        [CustomArgumentHandling] void customArgsAndException(in log intArg)
            raises(DOMException);

        void addEventListener(in DOMString type, 
                              in EventListener listener, 
                              in boolean useCapture);
        void removeEventListener(in DOMString type, 
                                 in EventListener listener, 
                                 in boolean useCapture);

        // 'CallWith' extended attribute
        [CallWith=DynamicFrame] void withDynamicFrame();
        [CallWith=DynamicFrame] void withDynamicFrameAndArg(in long intArg);
        [CallWith=DynamicFrame] void withDynamicFrameAndOptionalArg(in long intArg, in [Optional] long optionalArg);
        [NeedsUserGestureCheck, CallWith=DynamicFrame] void withDynamicFrameAndUserGesture(in long intArg);
        [NeedsUserGestureCheck, CallWith=DynamicFrame] void withDynamicFrameAndUserGestureASAD(in long intArg, in [Optional] long optionalArg);
        [CallWith=ScriptState] void withScriptStateVoid();
        [CallWith=ScriptState] TestObj withScriptStateObj();
        [CallWith=ScriptState] void withScriptStateVoidException()
            raises(DOMException);
        [CallWith=ScriptState] TestObj withScriptStateObjException()
            raises(DOMException);

        // 'Optional' extended attribute
        void    methodWithOptionalArg(in [Optional] long opt);
        void    methodWithNonOptionalArgAndOptionalArg(in long nonOpt, in [Optional] long opt);
        void    methodWithNonOptionalArgAndTwoOptionalArgs(in long nonOpt, in [Optional] long opt1, in long opt2);

        // 'ConvertScriptString' extended attribute
        readonly attribute [ConvertScriptString] DOMString scriptStringAttr;

#if defined(TESTING_V8) || defined(TESTING_JS)
        // Overloads
        void    overloadedMethod(in TestObj objArg, in DOMString strArg);
        void    overloadedMethod(in TestObj objArg, in [Optional] long intArg);
        void    overloadedMethod(in DOMString strArg);
        void    overloadedMethod(in long intArg);
#endif
    };
}
