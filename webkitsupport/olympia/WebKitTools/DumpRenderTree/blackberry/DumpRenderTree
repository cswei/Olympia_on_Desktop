#!/usr/bin/perl

# Small perl script to simulate the interactive output of DumpRenderTree by using
# pre-generated results files

use strict;
use warnings;

use Cwd;
use File::Basename;
use File::Spec;
use File::Path;
use Getopt::Long;
use IPC::Open2;
use POSIX;

sub copyLayouttests($$@);
sub dumpTests();
sub getResults();

my $dump = 0;
my $getResults = 0;
my $layoutSource;
my $layoutDestination;
my @tests;
my $timeoutSeconds = 35;

my $programName = basename($0);
my $usage = <<EOF;
Usage: $programName [options]
EOF


my $getOptionsResult = GetOptions(
    'dump' => \$dump,
    'get-results' => \$getResults,
    'layout-destination=s' => \$layoutDestination,
    'layout-source=s' => \$layoutSource,
    'timeout=i' => \$timeoutSeconds,
);
@tests = @ARGV;


if (!$getOptionsResult) {
    print STDERR $usage;
    exit 1;
}

my $SDCARD_DIR = $ENV{'SDCARD_PATH'};
my $FLEDGE_WD = $ENV{'FLEDGE_WD'};
my $FLEDGE_PATH = $ENV{'FLEDGE_PATH'};
my $CURRENT_TEST_FILE = "$SDCARD_DIR/current.drt";
my $DRT_DONE_FILE = "$SDCARD_DIR/done";

# Default FLEDGE Arguments
my @DEFAULT_FLEDGE_ARGS = ("-fs-sdcard", "-fs-sdcard-root=$SDCARD_DIR", qw(-clear-flash -start-hidden -app-param=NoFileIndexing -app=JvmFledgeSimulator.dll -handheld=talladega -session=talladega -app-param=DisableRegistration -app-param=JvmAlxConfigFile:talladega.xml -JvmDisableBacklightTimeout -data-port=0x4d44 -data-port=0x4d4e -pin=0x210000A));

# Extra FLEDGE Arguments
my @EXTRA_FLEDGE_ARGS = exists $ENV{'EXTRA_FLEDGE_ARGS'} ?  split '\s+', $ENV{'EXTRA_FLEDGE_ARGS'} : ();

# Device Specific
my $SDCARD_PATH_IS_DEVICE = $ENV{'SDCARD_PATH_IS_DEVICE'} if $ENV{'SDCARD_PATH_IS_DEVICE'};
$|++;

if ($dump) {
    exit dumpTests();
}

getResults();

exit;

sub quitFledge($) {
    my ($fledgePid) = @_;
    my $ret = waitpid($fledgePid, WNOHANG);
    return if $ret == -1 || $ret == $fledgePid;

    my $fledgeControllerPid = open2(\*RDR, \*WTR, "$FLEDGE_PATH/fledgecontroller.exe");
    print WTR "exit\n";
    close WTR;
    close RDR;

    print "INFO: Waiting for up to 10 seconds for Fledge to terminate gracefully...\n";
    for (my $i = 0; $i < 10; $i++) {
        my $ret = waitpid($fledgePid, WNOHANG);
        last if $ret == -1 || $ret == $fledgePid;
        sleep(1);
    }
    if (waitpid($fledgePid, WNOHANG) == 0) {
        print "INFO: Fledge not terminated gracefully after 10 seconds... Killing! [pid = $fledgePid]\n";
        kill 9, $fledgePid;
        kill 9, $fledgeControllerPid;
    }
    waitpid $fledgeControllerPid, 0;
    waitpid $fledgePid, 0;
    print "INFO: Sleeping for 5 seconds to ensure a proper burial...\n";
    sleep 5;
}

sub dumpTests() {
    my $index_file = "$SDCARD_DIR/index.drt";

    # Populate the index.drt
    print "INFO: Creating index.drt...\n";
    open INDEX, ">$index_file" or die "Failed to open file '$index_file': $!";
    foreach (@tests) {
        print INDEX "$_\n";
    }
    close INDEX;

    # Do not clean results if tests are already in progress
    if (! -e $CURRENT_TEST_FILE && ! -e $DRT_DONE_FILE && -d "$SDCARD_DIR/results"){
        print "INFO: Removing results/...\n";
        rmtree "$SDCARD_DIR/results";
    }

    # get a list of test directories
    my @testDirectories;
    foreach (@tests) {
        my $directoryName = (fileparse($_))[1];
        push @testDirectories, $directoryName if ! grep(/^\Q$directoryName\E$/, @testDirectories);
    }

    # Ensure directory skeletons exist for all tests
    print "INFO: Creating results/ skeleton structure...\n";
    mkpath "$SDCARD_DIR/results";
    foreach (@testDirectories) {
        mkpath "$SDCARD_DIR/results/$_";
    }

    # Ensure LayoutTests exist for all tests
    if ($SDCARD_PATH_IS_DEVICE) {
        # Device SDCards need a copy of the LayoutTests
        print "INFO: Creating results/ directory structure...\n";
        copyLayouttests($layoutSource, $layoutDestination, @testDirectories);
    } else {
        # virtual SDCards links to LayoutTests
        system "junction -s \"$layoutDestination\" \"$layoutSource\" " unless -d $layoutDestination;
    }
    my $ret = 0;

    # Stop here if SDCARD_PATH_IS_DEVICE
    if ($SDCARD_PATH_IS_DEVICE){
        return $ret;
    }



    while (scalar(@tests)) {

        if (!-e $DRT_DONE_FILE) {
            my $old_dir = cwd;

            my $fledgePid = fork();
            if (!$fledgePid) {
                chdir $FLEDGE_WD;
                open STDIN, File::Spec->devnull();
                open STDOUT, ">", File::Spec->devnull();
                exec "$FLEDGE_PATH/fledge.exe", (@DEFAULT_FLEDGE_ARGS, @EXTRA_FLEDGE_ARGS);
            }
            print "INFO: Starting Fledge... [pid = $fledgePid]\n";

            while (!-e $DRT_DONE_FILE) {
                my $current_test;
                if (-e $CURRENT_TEST_FILE) {
                    open CURRENT, "<$CURRENT_TEST_FILE";
                    $current_test = <CURRENT>;
                    close CURRENT;
                }

                unless (defined $current_test) {
                    last if (waitpid(-1, WNOHANG) == $fledgePid);
                    next;
                }

                # Allow a test to run for up to $timeoutSeconds plus 5 seconds padding for simulator delays
                # Check every 5 seconds whether or not to stop waiting on this test
                for (my $i = 0; $i <= $timeoutSeconds + 5; $i += 5) {
                    sleep(5);
                    last if -e $DRT_DONE_FILE;
                    if (-e $CURRENT_TEST_FILE && defined $current_test) {
                        open CURRENT, "<$CURRENT_TEST_FILE";
                        my $test = <CURRENT>;
                        close CURRENT;
                        if (defined $test && $current_test ne $test) {
                            print "INFO: Executing DRT: [$test]\n";
                            last;
                        }
                    }
                }
                # Kill the simulator if we still haven't progressed pass this test
                if (-e $CURRENT_TEST_FILE && defined $current_test) {
                    open CURRENT, "<$CURRENT_TEST_FILE";
                    if ($current_test eq <CURRENT>) {
                        print "INFO: Trying to restart fledge due to timeout... [$current_test]\n";
                        quitFledge($fledgePid);
                        close CURRENT;
                        last;
                    }
                    close CURRENT;
                }

                # Check if Fledge has crashed
                last if (waitpid(-1, WNOHANG) == $fledgePid);
            }

            # Terminate fledge gracefully if we're done
            quitFledge($fledgePid);
            unlink $CURRENT_TEST_FILE;
        }

        my @reruntests;
        foreach (@tests) {
            chomp;
            my $file = $_;
            $file =~ s/^.*LayoutTests\///;
            $file = "$SDCARD_DIR/results/$file.dump";
            push @reruntests, $_ unless -e $file or -e "$file.crash";
        }
        if (@tests == @reruntests) {
            $ret = 1;
            last;
        }
        open INDEX, ">$index_file";
        print INDEX $_, "\n" for (@reruntests);
        close INDEX;
        @tests = @reruntests;
    }
    return $ret;
}

# Copy LayoutTests to device (requires actual copy)
sub copyLayouttests($$@)
{
    my ($source, $destination, @testDirectories) = @_;
    foreach (@testDirectories) {
        # Copy this directory recursively if it does not exist.
        if (! -d "$destination/$_") {
            # If this is a specific test or subtest such as css1/basic,
            # we need to copy all of css1/ directory.
            # There may also be inter-subtest relations which are not available.

            print "\nWARNING: [$_] is missing from the SDCard.\n";
            print "   !!! It is strongly recommended to manually copy all of LayoutTests/ to your SDCard to ensure inter-dependant test functionality. !!!\n\n";
            $_ =~ s/\/.*//;
            print "INFO: Copying [$_] to the SD-Card...\n";
            mkpath "$destination/$_";
            system "cp -ru \"$source/$_/\"* \"$destination/$_\"";
        }
    }
}

sub getResults() {
    while (<STDIN>) {
        chomp;
        my $test = $_;
        $test =~ s/^.*LayoutTests\///;
        my $crash = "$SDCARD_DIR/results/$test.dump.crash";
        my $stdout = "$SDCARD_DIR/results/$test.dump";
        my $stderr = "$SDCARD_DIR/results/$test.stderr";

        exit 1 if -e "$crash" or ! -s "$stdout";

        if ( -e "$stdout" ) {
            open FILE, $stdout;
            while (<FILE>) {
                chomp;
                print $_, "\n";
            }
            close FILE;
        }
        if ( -e "$stderr" ) {
            open FILE, $stderr;
            while (<FILE>) {
                chomp;
                print STDERR $_, "\n";
            }
            close FILE;
        }
        print "#EOF\n";
        print STDERR "#EOF\n";

        # Pixel test output:
        # Pixel tests not supported yet
        print "#EOF\n";
        print STDERR "#EOF\n";
    }
    unlink $CURRENT_TEST_FILE;
    unlink $DRT_DONE_FILE;
}
