/****************************************************************************
** Copyright (C) 2004-2009 Mazatech S.r.l. All rights reserved.
**
** This file is part of AmanithVG software, an OpenVG implementation.
** This file is strictly confidential under the signed Mazatech Software
** Non-disclosure agreement and it's provided according to the signed
** Mazatech Software licensing agreement.
**
** Khronos and OpenVG are trademarks of The Khronos Group Inc.
** OpenGL is a registered trademark and OpenGL ES is a trademark of
** Silicon Graphics, Inc.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** For any information, please contact info@mazatech.com
**
****************************************************************************/

#ifndef _VGTEXTURE_H
#define _VGTEXTURE_H

/*!
	\file vgtexture.h
	\brief Texture functions, header.
	\author Matteo Muratori
	\author Michele Fabbri
*/

#if defined(AM_GLE) || defined(AM_GLS)
	#include "glglobals.h"
#else
	#include "amanith_globals.h"
#endif

//! Texture structure, dimensions are always power of two.
typedef struct _AMTexture {
	//! Texture width, in pixels.
	AMuint32 width;
	//! Texture height, in pixels.
	AMuint32 height;
	//! Texture pixels, they are always full 32bit pixels.
	AMuint32 *pixels;
#if defined(AM_GLE) || defined(AM_GLS)
	//! Texture target, it could be one of the following values: GL_TEXTURE_2D, GL_TEXTURE_RECTANGLE_EXT, GL_TEXTURE_RECTANGLE_ARB.
	GLenum target;
	//! OpenGL / OpenGL|ES texture handle, generated by glGenTextures.
	GLuint glHandle;
	//! Texture sub-width, in pixels; it's the used subregion width.
	AMuint32 subWidth;
	//! Texture sub-height, in pixels; it's the used subregion height.
	AMuint32 subHeight;
#endif
} AMTexture;

// Initialize a given texture structure.
void amTextureInit(AMTexture *texture);
// Destroy the specified texture.
void amTextureDestroy(AMTexture *texture);
// Give the power of two value greater (or equal) to a specified value.
AMuint32 amPow2Get(const AMuint32 value);
// Given a power of two value, it returns the corresponding shift such as (1 << amPow2Get(value)) = value.
AMuint32 amPow2Shift(const AMuint32 pow2Value);
/*!
	\brief Given an unsigned value greater than 0, check if it's a power of two number.
	\param value value to check.
	\return AM_TRUE if value is given value is a power of two, else AM_FALSE.
	\pre value > 0.
*/
AM_INLINE AMbool amPow2Check(const AMuint32 value) {

	AM_ASSERT(value > 0);

	return (!(value & (value - 1))) ? AM_TRUE : AM_FALSE;
}

#if defined(AM_GLE) || defined(AM_GLS)
// Map an image point (x, y) into the corresponding texture coordinate uv.
void amTextureUVMap(AMfloat *u,
					AMfloat *v,
					const AMTexture *texture,
					const AMuint32 imageWidth,
					const AMuint32 imageHeight,
					const AMfloat x,
					const AMfloat y);
#endif

#endif
